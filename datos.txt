

Ejecución
	/ircserv <port> <password>

Rol 1 - Paco
	Configuración del servidor
		Creación de sokets, binding y escucha
	
	Gestión de conexiones
		Manejo de conexiones entrantes y salientes con tecnicas de 
		multiplexación (select, poll o epoll)
	
	Manejo de errores
		Errores de red, desconexiones y ataques básicos
	
	Testing inicial
		Pruebas de conectividad y estrés para validar la estabilidad 
		de la infraestructura


Rol 2 - Yago
	Parseo de comandos
		Desarrollar modulo encargado de interpretar los comandos enviados por 
		los clientes y verificar que cumplan las especificaciones
	
	Implementación de comandos básicos
		Programar la lógica para los comandos esenciales
		KICK, INVITE, TOPIC, MODE
	
	Manejo de respuestas y feedback
		Definir como el servidor debe responder ante comandos válidos,
		errores o situaciones especiales
	
	Validación y seguridad
		Asegurar que el parser gestione correctamente entradas inesperadas o maliciosas


Rol 3 - Carlos
	Gestión de datos
		Diseñar e implementar las estructuras de datos para los usuarios, canales y estados de conexiones
	
	Administración de canales
		Manejar la creación, unión, abandono y comunicación dentro de los canales
	
	Distribución de mensajes
		Implementar la lógica que permite la difusión de mensajes a los usuarios correctos,
		tanto en canales como en mensajes privados

	Sincronización y consistencia
		Garantizar que la información entre los módulos
		(usuarios, canales y comandos) se mantenga coherente y actualizada


1 -
	Configuración del servidor
		Crear el socket ( socket() ) y configurarlo para IPv4 ( AF_INET ) o IPv6

		Asociar el socket a una direccion IP y puerto ( bind() )

		Preparar el socket para escuchar conexiones ( listen() )

	Multiplexación (manejo de multiples conexiones)
		Implementar select() o poll() para manejar multiples clientes simultaneamente

		Asegurar que se puedan aceptar nuevas conexiones ( acept() ) sin bloquear el servidor

	Establecer un bucle principal de recepción de mensajes
		Leer datos recibidos desde los clientes ( recv() ) y almacenarlos en un buffer

		Proveer un sistema básico de envío de respuestas ( send() ) para pruebas iniciales
	
	Testing básico
		Comprobar que múñtiples clientes puedan conectarse simultáneamente

		Enviar y recibir mensajes sin que se caiga el servidor

		Implementar un cierre limpio de conexiones ( close() ) o ( shutdown() )


2 -
	Crear un parse que interprete comandos IRC según las especificaciones (RFC 1459)

	Implementar respuestas mínimas para comandos básicos para comprobar el flujo de comunicación

	Permitir que el parse procese líneas completas de mensajes (\r\n o \n como delimitadores)


3 - 
	Crear estructuras de datos para usuarios y canales

	Implemensar comandos relacionados con los canales y mensajes privados

	Probar que los mensajes se distribuyan adecuadamente entre los clientes conectados



Pruebas conexión con servidor:
	telnet 127.0.0.1 6667
	nc -C 127.0.0.1 6667

	Estas funciones estan metidas en la clase server.cpp
	sacarlo para que quede mejor
Crear canal y unirse
	JOIN <nombre canal>

Mostrar canales y cantidad de usuarios
	show


Protocol specifications:
https://modern.ircdocs.horse/